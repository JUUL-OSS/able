buildscript {
    apply from: rootProject.file('gradle/dependencies.gradle')

    repositories {
        jcenter()
    }
}

plugins {
    id 'org.jetbrains.kotlin.android' version '1.3.70' apply false
    id 'org.jmailen.kotlinter' version '2.2.0' apply false
    id 'com.android.library' version '3.6.2' apply false
    id 'digital.wup.android-maven-publish' version '3.6.3' apply false

    // `jacoco-android` is incompatible with Gradle 6.x, fails with:
    // groovy.lang.GroovyRuntimeException: Cannot set the value of read-only property 'executionData'...
    // https://github.com/arturdm/jacoco-android-gradle-plugin/issues/72
    id 'com.hiya.jacoco-android' version '0.2' apply false

    id 'binary-compatibility-validator' version '0.2.3'
}

ext.publishUrl = {
    def version = project.property("version")
    if (version == null || version == "" || version == "unspecified") {
        return ""
    } else if (version ==~ /.+-dev-?\d+/) {
        return "https://maven.pkg.github.com/juullabs/android-github-packages"
    } else {
        throw GradleScriptException("Only publication of dev tags are allowed on internal branch.")
    }
}

subprojects {
    repositories {
        google()
        jcenter()

        // STOPSHIP: Remove once `SharedFlow` is officially released.
        // https://github.com/Kotlin/kotlinx.coroutines/pull/2069
        maven {
            url = "https://maven.pkg.github.com/juullabs/kotinx.coroutines-sharedflow"
            credentials {
                username = findProperty('github.packages.username')
                password = findProperty('github.packages.password')
            }
        }

        mavenLocal()
    }
}

subprojects {
    tasks.withType(Test) {
        testLogging {
            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
            showExceptions true
            showStackTraces true
            showCauses true
        }
    }
}

// Prevent publishing if `version` property is not set (e.g. via `-Pversion` command line argument).
gradle.taskGraph.whenReady { taskGraph ->
    taskGraph.getAllTasks().findAll { task ->
        task.name.startsWith('publish')
    }.forEach { task ->
        task.doFirst {
            if (!project.hasProperty("version") || project.findProperty("version") == "unspecified") {
                throw new GradleException("Unable to publish without version property")
            }
        }
    }
}
